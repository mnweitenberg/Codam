version: '3'

services:
  mariadb:
    build: requirements/mariadb/
    container_name: mariadb
    env_file:
      - .env
    expose:
      - 3306
    networks:
      - intra-network
    restart: unless-stopped
    volumes:
      - volume-db:/var/lib/mysql

  wordpress:
    build: requirements/wordpress/
    container_name: wordpress
    depends_on:
      - mariadb
    env_file:
      - .env
    expose:
      - 9000
    networks:
      - intra-network
    restart: unless-stopped
    volumes:
      - volume-www:/var/www/html

  nginx:
    build: requirements/nginx/
    container_name: nginx
    depends_on:
      - wordpress
    env_file:
      - .env
    networks:
      - intra-network
    ports:
      - "443:443"
    restart: unless-stopped
    volumes:
      - volume-www:/var/www/html

networks:
  intra-network:

volumes:
  volume-db:
    driver_opts:
      device: ${HOME}/data/db
      o: bind
      type: none

  volume-www:
    driver_opts:
      device: ${HOME}/data/www
      o: bind
      type: none
  

# services
  # container_name: name of container
  # build         : location of Dockerfile that builds the image
  # image         : specifies the image to start the container from
  # env_file      : location of file with environment variables
  # depends_on    : which containers should be build before building this one 
  # ports         : [host port]:[container port] binds port of host to port of container. 
  # networks      : what network should the container be a part of. 
  # volumes       : [path_to_disk_folder]:[path_to_container_folder]
  # restart       : should the container restart in case of crash?

# There are two main categories of data — persistent and non-persistent. Persistent
# is the data you need to keep. Things like; customer records, financial data, 
# research results, audit logs, and even some types of application log data. 
# Non-persistent  is the data you don’t need to keep. To deal with non-persistent 
# data, every Docker container gets its own non-persistent storage. This is 
# automatically created  for every container and is tightly coupled to the lifecycle 
# of the container. As a  result, deleting the container will delete the storage 
# and any data on it. To deal with  persistent data, a container needs to store 
# it in a volume. Volumes are separate objects that have their lifecycles decoupled 
# from containers. This means you can create and  manage volumes independently, 
# and they’re not tied to the lifecycle of any container.  Net result, you can 
# delete a container that’s using a volume, and the volume won’t be  deleted.

# volumes
  # [name of volume]
    # driver opts   specifies a list of options as key-value pairs to pass to the 
    #               driver for this network.
      # device    : path to volume
      # o         : bind, a file or directory on the host machine is mounted into a container. 
      # type      : none means that there is no physical disk partition linked to the volume

# networks
#   name of network
      # the deafult driver is a bridge network, which allows containers connected 
      # to the same bridge network to communicate, while providing isolation from 
      # containers which are not connected to that bridge network. 
